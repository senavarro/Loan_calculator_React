{"version":3,"sources":["components/Header.js","components/Form.js","helpers.js","components/Message.js","components/Result.js","components/Spinner.js","App.js","serviceWorker.js","index.js"],"names":["Header","title","Form","props","amount","saveAmount","quote","saveQuote","saveTotal","saveLoading","useState","error","saveError","onSubmit","e","preventDefault","setTimeout","total","totalAmount","totalQuote","calculateTotal","className","type","placeholder","onChange","parseInt","target","value","Message","Resultado","toFixed","Spinner","App","component","loading","Result","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.c4332825.chunk.js","sourcesContent":["import React from 'react'\n\nconst Header = ({title}) =>  ( \n        <div>\n            <h1>{title}</h1>\n        </div>\n     );\n \nexport default Header ;\n","import React, { Fragment, useState } from 'react'\nimport { calculateTotal } from '../helpers';\n\nconst Form = (props) => {\n\n    const {amount, saveAmount, quote, saveQuote, saveTotal, saveLoading} = props;\n\n    //Defining state\n    const [error, saveError] = useState(false);\n\n\n    //Calculates the loan\n    const calculateLoan = e => {\n        e.preventDefault();\n        \n        //Validate form\n        if( amount === 0 || quote === ''){\n            saveError(true);\n            return;\n        }\n\n        //eliminar error previo\n        saveError(false);\n\n        //Spinner on\n        saveLoading(true);\n\n        setTimeout(() => {\n         //Make the calculation\n            const total = calculateTotal(amount, quote);\n            \n            //Once it has been calculated\n            saveTotal(total);\n\n            //Spinner goes off\n            saveLoading(false);\n        },3000)\n    }\n\n    return ( \n    <Fragment>\n            <form onSubmit = { calculateLoan } >\n            <div className=\"row\">\n                <div>\n                    <label>Amount</label>\n                    <input \n                        className=\"u-full-width\" \n                        type=\"number\" \n                        placeholder=\"Example: 3000\" \n                        onChange={ e => saveAmount(parseInt(e.target.value)) }\n                    />\n                </div>\n                <div>\n                    <label>Quotes</label>\n                    <select \n                        className=\"u-full-width\"\n                        onChange={ e => saveQuote(parseInt(e.target.value)) }\n                    >\n                        <option value=\"\">Select</option>\n                        <option value=\"3\">3 months</option>\n                        <option value=\"6\">6 months</option>\n                        <option value=\"12\">12 months</option>\n                        <option value=\"24\">24 months</option>\n                    </select>\n                </div>\n                <div>\n                    <input \n                        type=\"submit\" \n                        value=\"Calculate\" \n                        className=\"button-primary u-full-width\" \n                    />\n                </div>\n            </div>\n    </form>\n        { (error) ? <p className=\"error\">All fields are mandatory</p> : '' }\n    \n  </ Fragment>\n    );\n\n}\n \nexport default Form;","export function calculateTotal(amount, quote) {\n\n    let totalAmount;\n    if(amount <= 1000) {\n        totalAmount = amount * .25;\n    }else if(amount > 1000 && amount <= 5000) {\n        totalAmount = amount * .20;\n    }else if(amount > 5000 && amount <= 10000){\n        totalAmount = amount * .15;\n    }else if(amount > 10001) {\n        totalAmount = amount * .10;\n    }\n\n    let totalQuote = 0;\n    \n    switch(quote) {\n        case 3:\n            totalQuote = amount *  .05;\n            break;\n        case 6:\n            totalQuote = amount *  .10;\n            break;\n        case 12:\n            totalQuote = amount *  .15;\n            break;\n        case 24:\n            totalQuote = amount *  .20;\n            break;\n        default: \n            break;\n    }\n\n    return totalQuote + totalAmount + amount;\n}","import React from 'react'\n\nconst Message = () =>  (\n    <p>Add an ammount and select how many quotes will you need</p>\n  );\n\n \nexport default Message;","import React from 'react'\n\nconst Resultado = ({total, quote, amount}) => (\n        <div className=\"u-full-width resultado\">\n            <h2>Summary</h2>\n            <p>The amount requested is: £{amount}</p>\n            <p>The number of quotes requestes is: {quote}</p>\n            <p>Your monthly payment will be: £{(total / quote).toFixed(2)}</p>\n            <p>The total to pay will be: {(total).toFixed(2)}</p>\n        </div>\n);\n\n \nexport default Resultado;","import React from 'react'\nimport './Spinner.css';\n\nconst Spinner = () => {\n    return ( \n        <div className=\"sk-chase\">\n        <div className=\"sk-chase-dot\"></div>\n        <div className=\"sk-chase-dot\"></div>\n        <div className=\"sk-chase-dot\"></div>\n        <div className=\"sk-chase-dot\"></div>\n        <div className=\"sk-chase-dot\"></div>\n        <div className=\"sk-chase-dot\"></div>\n</div>\n     );\n}\n \nexport default Spinner;","import React, { Fragment, useState } from 'react';\nimport Header from './components/Header';\nimport Form from './components/Form';\nimport  Message from './components/Message';\nimport Result from './components/Result';\nimport Spinner from './components/Spinner';\n\n\nfunction App() {\n\n  //Define the state\n  const [amount, saveAmount]= useState(0);\n  const [quote, saveQuote]= useState('');\n  const [total, saveTotal] = useState(0);\n  const [loading, saveLoading] = useState(false);\n\n  let component;\n  if(loading) {\n    component = <Spinner />\n  } else if(total === 0) {\n    component = <Message />\n  }else{\n    component = <Result \n                    total = {total}\n                    quote = {quote}\n                    amount = {amount}\n    />\n  }\n\n  return (\n    <Fragment>\n      <div className=\"App\">\n        <Header \n          title=\"Loan quote\"\n        />\n      </div>\n      <div className=\"container\">\n        <Form \n          amount={amount}\n          saveAmount={saveAmount}\n          quote = {quote}\n          saveQuote = {saveQuote}\n          saveTotal = {saveTotal}\n          saveLoading = {saveLoading}\n        />\n        <div className=\"mensajes\">\n          {component}\n        </div>\n      </div>\n      </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}